openapi: 3.0.2
info:
  title: 'YaMDb API'
  version: ''
  description: |
    API requests start with `/api/v1/`

    # Description
    The **YaMDb** project collects user feedback on various products.

    # User registration algorithm
    1. The user sends a POST request to add a new user with the `email` and `username` parameters to the `/api/v1/auth/signup/` endpoint.
    2. **YaMDB** sends an email with a confirmation code (`confirmation_code`) to `email`.
    3. The user sends a POST request with the `username` and `confirmation_code` parameters to the `/api/v1/auth/token/` endpoint, in response to the request, he receives a `token` (JWT token).
    4. If desired, the user sends a PATCH request to the `/api/v1/users/me/` endpoint and fills in the fields in his profile (the description of the fields is in the documentation).

    # Custom Roles
    - **Anonymous** - can view descriptions of products, read reviews and comments.
    - **Authenticated user** (`user`) - can, like **Anonymous**, read everything, in addition, he can publish reviews and rate products (films / books / songs), can comment on other people's reviews; can edit and delete **his** reviews and comments. This role is assigned by default to every new user.
    - **Moderator** (`moderator`) - the same rights as the **Authenticated user** plus the right to delete **any** reviews and comments.
    - **Administrator** (`admin`) - full rights to manage all project content. Can create and delete products, categories and genres. Can assign roles to users.
    - **Django Superuser** - has administrator rights (`admin`)


servers:
  - url: /api/v1/

tags:
  - name: AUTH
    description: User registration and issuance of tokens
  - name: CATEGORIES
    description: Categories (types) of products
  - name: GENRES
    description: Genre categories
  - name: TITLES
    description: Products to which they write reviews (a certain film, book or song).
  - name: REVIEWS
    description: Reviews
  - name: COMMENTS
    description: Comments on reviews
  - name: USERS
    description: Users

paths:
  /auth/signup/:
    post:
      tags:
        - AUTH
      operationId: New User Registration
      description: |
        Get the confirmation code to the given `email`.

        Access rights: **Available without a token.**

        Using the name 'me' as `username` is not allowed.

        The `email` and `username` fields must be unique.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
                - username
              properties:
                email:
                  type: string
                username:
                  type: string
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  email:
                    type: string
                  username:
                    type: string
                required:
                - email
                - username
          description: 'Successful request execution'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: 'Required field missing or invalid'
  /auth/token/:
    post:
      tags:
        - AUTH
      operationId: Getting a JWT token
      description: |
        Getting a JWT token in exchange for username and confirmation code.

        Access rights: **Available without a token.**
      requestBody:
        content:
          application/json:
            schema:
              required:
                - username
                - confirmation_code
              properties:
                username:
                  type: string
                confirmation_code:
                  type: string
                  writeOnly: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: 'Successful request execution'
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
          description: 'A required field is missing or incorrect'
        404:
          description: User is not found

  /categories/:
    get:
      tags:
        - CATEGORIES
      operationId: Getting a list of all categories
      description: |
        Get a list of all categories

        Access rights: **Available without a token**
      parameters:
      - name: search
        in: query
        description: Search by category name
        schema:
          type: string
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Category'
    post:
      tags:
        - CATEGORIES
      operationId: Adding a new category
      description: |
        Create a category.

        Access rights: **Administrator.**

        The `slug` field of each category must be unique.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin
  /categories/{slug}/:
    delete:
      tags:
        - CATEGORIES
      operationId: Deleting a category
      description: |
        Delete category.

        Access rights: **Administrator.**
      parameters:
      - name: slug
        in: path
        required: true
        description: Slug category
        schema:
          type: string
      responses:
        204:
          description: 'Successful request execution'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: Category not found
      security:
      - jwt-token:
        - write:admin

  /genres/:
    get:
      tags:
        - GENRES
      operationId: Getting a list of all genres
      description: |
        Get a list of all genres.

        Access rights: **Available without a token**
      parameters:
      - name: search
        in: query
        description: Search by genre name
        schema:
          type: string
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Genre'
    post:
      tags:
        - GENRES
      operationId: Adding a Genre
      description: |
        Add genre.

        Access rights: **Administrator**.

        The `slug` field of each genre must be unique.
      responses:
        201:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin

  /genres/{slug}/:
    delete:
      tags:
        - GENRES
      operationId: Removing a genre
      description: |
        Delete genre.

        Access rights: **Administrator**.
      parameters:
      - name: slug
        in: path
        required: true
        description: Slug genre
        schema:
          type: string
      responses:
        204:
          description: 'Successful request execution'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: Genre not found
      security:
      - jwt-token:
        - write:admin

  /titles/:
    get:
      tags:
        - TITLES
      operationId: Getting a list of all products
      description: |
        Get a list of all objects.

        Access rights: **Available without a token**
      parameters:
        - name: category
          in: query
          description: filters by category slug field
          schema:
            type: string
        - name: genre
          in: query
          description: filters by genre slug field
          schema:
            type: string
        - name: name
          in: query
          description: filter by title
          schema:
            type: string
        - name: year
          in: query
          description: filters by year
          schema:
            type: integer
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Title'
    post:
      tags:
        - TITLES
      operationId: Adding a product
      description: |
        Add a new piece.

        Access rights: **Administrator**.

        You can not add products that have not yet been released (the year of release cannot be more than the current one).

        When adding a new product, you must specify an existing category and genre.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        201:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin
  /titles/{titles_id}/:
    parameters:
      - name: titles_id
        in: path
        required: true
        description: Object ID
        schema:
          type: integer
    get:
      tags:
        - TITLES
      operationId: Getting information about a product
      description: |
        Information about the product


        Access rights: **Available without a token**
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        404:
          description: Object not found
    patch:
      tags:
        - TITLES
      operationId: Partial update of information about the product
      description: |
        Update product information


        Access rights: **Administrator**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TitleCreate'
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Title'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: Object not found
      security:
      - jwt-token:
        - write:admin
    delete:
      tags:
        - TITLES
      operationId: Deleting a product
      description: |
        Delete artwork.

        Access rights: **Administrator**.
      responses:
        204:
          description: 'Successful request execution'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: Product not found
      security:
      - jwt-token:
        - write:admin

  /titles/{title_id}/reviews/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: ID product
        schema:
          type: integer
    get:
      tags:
        - REVIEWS
      operationId: Getting a list of all reviews
      description: |
        Get a list of all reviews.

        Access rights: **Available without a token**.
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Review'
        404:
          description: Product not found
    post:
      tags:
        - REVIEWS
      operationId: Adding a new review
      description: |
        Add a new review. A user can leave only one review per product.

        Access rights: **Authenticated users.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        201:
          description: 'Successful request execution'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT token required
        404:
          description: Product not found
      security:
      - jwt-token:
        - write:user,moderator,admin
  /titles/{title_id}/reviews/{review_id}/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Product ID
        schema:
          type: integer
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: integer
    get:
      tags:
        - REVIEWS
      operationId: Get review by id
      description: |
        Get review by id for the specified product.

        Access rights: **Available without a token.**
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        404:
          description: Product or review not found
    patch:
      tags:
        - REVIEWS
      operationId: Partial review update by id
      description: |
        Partially update review by id.

        Access rights: **Review author, moderator or administrator.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: Product not found
      security:
      - jwt-token:
        - write:user,moderator,admin
    delete:
      tags:
        - REVIEWS
      operationId: Delete review by id
      description: |
        Delete review by id

        Access rights: **Review author, moderator or administrator.**
      responses:
        204:
          description: 'Successful request execution'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: Product or review not found
      security:
      - jwt-token:
        - write:user,moderator,admin

  /titles/{title_id}/reviews/{review_id}/comments/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Product ID
        schema:
          type: integer
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: integer
    get:
      tags:
        - COMMENTS
      operationId: Getting a list of all comments on a review
      description: |
        Get a list of all comments on a review by id

        Access rights: **Available without a token.**
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/Comment'
        404:
          description: Product or review not found
    post:
      tags:
        - COMMENTS
      operationId: Adding a comment to a review
      description: |
        Add a new comment for the review.

        Access rights: **Authenticated users.**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful request execution'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT token required
        404:
          description: Product or review not found
      security:
      - jwt-token:
        - write:user,moderator,admin

  /titles/{title_id}/reviews/{review_id}/comments/{comment_id}/:
    parameters:
      - name: title_id
        in: path
        required: true
        description: Product ID
        schema:
          type: integer
      - name: review_id
        in: path
        required: true
        description: Review ID
        schema:
          type: integer
      - name: comment_id
        in: path
        required: true
        description: Comment ID
        schema:
          type: integer
    get:
      tags:
        - COMMENTS
      operationId: Receiving a comment on a review
      description: |
        Get a comment for a review by id.

        Access rights: **Available without a token.**
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful request execution'
        404:
          description: Product, review or comment not found
    patch:
      tags:
        - COMMENTS
      operationId: Partial update of review comment
      description: |
        Partially update the review comment by id.

        Access rights: **Comment author, moderator or administrator**.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: 'Successful request execution'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: Product, review or comment not found
      security:
      - jwt-token:
        - write:user,moderator,admin
    delete:
      tags:
        - COMMENTS
      operationId: Deleting a review comment
      description: |
        Delete a review comment by id.

        Access rights: **Comment author, moderator or administrator**.
      responses:
        204:
          description: 'Successful request execution'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: Product, review or comment not found
      security:
      - jwt-token:
        - write:user,moderator,admin

  /users/:
    get:
      tags:
        - USERS
      operationId: Getting a list of all users
      description: |
        Get a list of all users.

        Access rights: **Administrator**
      parameters:
      - name: search
        in: query
        description: Search by username (username)
        schema:
          type: string
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    next:
                      type: string
                    previous:
                      type: string
                    results:
                      type: array
                      items:
                        $ref: '#/components/schemas/User'
        401:
          description: JWT token required
      security:
      - jwt-token:
        - read:admin
    post:
      tags:
        - USERS
      operationId: Adding a user
      description: |
        Add a new user.

        Access rights: **Administrator**

        The `email` and `username` fields must be unique.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT token required
        403:
          description: No access rights
      security:
      - jwt-token:
        - write:admin
  /users/{username}/:
    parameters:
      - name: username
        in: path
        required: true
        description: Username
        schema:
          type: string
    get:
      tags:
        - USERS
      operationId: Getting a user by username
      description: |
        Get user by username.

        Access rights: **Administrator**
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: User is not found
      security:
      - jwt-token:
        - read:admin
    patch:
      tags:
        - USERS
      operationId: Changing user data by username
      description: |
        Change user data by username.

        Access rights: **Administrator.**

        The `email` and `username` fields must be unique.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: User is not found
      security:
      - jwt-token:
        - write:admin
    delete:
      tags:
        - USERS
      operationId: Deleting a user by username
      description: |
        Delete user by username.

        Access rights: **Administrator.**
      responses:
        204:
          description: Successful request execution
        401:
          description: JWT token required
        403:
          description: No access rights
        404:
          description: User is not found
      security:
      - jwt-token:
        - write:admin

  /users/me/:
    get:
      tags:
        - USERS
      operationId: Getting your account information
      description: |
        Get your account details

        Access rights: **Any authorized user**
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
      - jwt-token:
        - read:admin,moderator,user
    patch:
      tags:
        - USERS
      operationId: Changing your account information
      description: |
        Change your account information

        Access rights: **Any authorized user**

        The `email` and `username` fields must be unique.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Me'
      responses:
        200:
          description: Successful request execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'A required field is missing or incorrect'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
      security:
      - jwt-token:
        - write:admin,moderator,user

components:
  schemas:

    User:
      title: User
      type: object
      description: Detailed user information
      required:
          - username
          - email
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
        role:
          type: string
          description: Administrator, moderator or user. The default is `user`.
          enum:
            - user
            - moderator
            - admin

    Title:
      title: object
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          title: Product ID
          readOnly: true
        name:
          type: string
          title: Name
        year:
          type: integer
          title: Year of issue
        rating:
          type: integer
          readOnly: True
          title: Rating based on reviews, if there are no reviews - `None`
        description:
          type: string
          title: Description
        genre:
          type: array
          items:
            $ref: '#/components/schemas/Genre'
        category:
          $ref: '#/components/schemas/Category'

    TitleCreate:
      title: Object to change
      type: object
      required:
        - name
        - year
        - genre
        - category
      properties:
        name:
          type: string
          title: Name
        year:
          type: integer
          title: Year of issue
        description:
          type: string
          title: Description
        genre:
          type: array
          items:
            type: string
            title: Slug genre
        category:
          type: string
          title: Slug category

    Genre:
      type: object
      properties:
        name:
          type: string
          maxLength: 256
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - name
      - slug

    Review:
      title: Review
      type: object
      description: Review details
      required:
          - text
          - score
      properties:
        id:
          type: integer
          title: ID  review
          readOnly: true
        text:
          type: string
          title: Text review
        author:
          type: string
          title: user username
          readOnly: true
        score:
          type: integer
          title: Grade
          minimum: 1
          maximum: 10
        pub_date:
          type: string
          format: date-time
          title: Review publication date
          readOnly: true

    ValidationError:
      title: Validation error
      type: object
      properties:
        field_name:
          type: array
          items:
            type: string

    Token:
      title: Token
      type: object
      properties:
        token:
          type: string
          title: access token

    Comment:
      title: Comment
      type: object
      description: Comment details
      required:
        - text
      properties:
        id:
          type: integer
          title: ID  comment
          readOnly: true
        text:
          type: string
          title: Comment text
        author:
          type: string
          title: username of the author of the comment
          readOnly: true
        pub_date:
          type: string
          format: date-time
          title: Date the comment was posted
          readOnly: true

    Me:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+\z
          maxLength: 150
        role:
          enum:
          - admin
          - moderator
          - user
          type: string
          readOnly: true
        email:
          type: string
          format: email
          maxLength: 254
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        bio:
          type: string
      required:
      - username
      - email

    Category:
      type: object
      properties:
        name:
          type: string
          maxLength: 256
        slug:
          type: string
          maxLength: 50
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - name
      - slug

  securitySchemes:
    jwt-token:
      type: apiKey
      description: Authentication using JWT tokens is used
      name: Bearer
      in: header
